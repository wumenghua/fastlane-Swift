# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

# 指定持续集成对象的平台名称
platform :ios do
# 给lane命名
lane :lane do|options|
branch = options[:branch]
day = Time.now.strftime("%Y-%m-%d %H:%M:%S") #2012-03-06 15:28:08

# target区分提测环境
# puts是ruby中的输出，gets为获取终端中输入的文字。
# puts "请选择要打的Target：（0：Fastlane-Swift，else: 不打包）"   
puts "请选择要打的Target：（0：Fastlane-Swift，else: 不打包）"      
scheme = STDIN.gets
# 通过判断输入内容，来区分一些打包信息，1后面加\n是因为在终端输入1再敲回车的时候scheme就包含了回车的内容，所以scheme == "1\n"
# schemeName : 项目中target的名称
 if scheme == "0\n" 
  scheme = "Fastlane-Swift"
  schemeName = "Fastlane-Swift"
 #elsif scheme == "1\n" 
 # scheme = "YiFu"   
 # schemeName = "易管家"
 else
  scheme = "未选择" 
  schemeName = "未选择"   
end
puts "所选Target: ==:"+scheme+"  ==:"+schemeName


# export_method : 打包的用途(app-store, package, ad-hoc, enterprise, development).
puts "请选择要打包的用途：（0：development，1：app-store，2：package，3：ad-hoc，4：enterprise，else: 不打包）"      
export_method = STDIN.gets
 if export_method == "0\n" 
  export_method = "development"
 elsif export_method == "1\n" 
  export_method = "app-store"
 elsif export_method == "2\n" 
  export_method = "package"
 elsif export_method == "3\n" 
  export_method = "ad-hoc"
 elsif export_method == "4\n" 
  export_method = "enterprise"
 else
  export_method = "ad-hoc"    
end
puts "所选用途: ==:"+export_method

# configuration : 指定打包方式，Release 或者 Debug
puts "请选择打包方式: (0:Debug  1: Release)"
configuration = STDIN.gets
 if configuration == "0\n"
  configuration = "Debug"
 elsif configuration == "1\n"
   configuration = "Release"
 else
  configuration = "Release"
 end
puts "所选打包方式: ==:"+configuration


#输入蒲公英上传ipa包后输入的版本描述信息
# puts "请输入版本描述信息："
# desc = STDIN.gets

puts "开始打包 #{schemeName}"
# 开始打包
gym(
#指定scheme的名字
scheme: "#{scheme}",
#输出的ipa名称
output_name:"#{schemeName}-#{configuration}",
# 是否清空以前的编译信息 true：是
clean:true,
# 指定打包方式，Release 或者 Debug
configuration:"#{configuration}",
# 指定打包所使用的输出方式(app-store, package, ad-hoc, enterprise, development).
export_method:"#{export_method}",
# 访问钥匙串
export_xcargs: "-allowProvisioningUpdates",
# 指定输出文件路径
output_directory:"./fastlane/build/#{scheme}/#{day}",
# 配置证书
#export_options: {
	#provisioningProfiles:{
      	#{}"xxx.xxx.xxx" => "xxxxx",
      #}
  #}
)



#从蒲公英平台拿到的api_key和user_key.
#api_key = ""
#user_key = ""

# puts "开始上传到蒲公英" #上面配置好蒲公英api_key和user_key.即可上传
# 上传屏蔽
#deliver(force: true, 
	  # 不上传屏幕截图
      #skip_screenshots:true, 
      # 不上传元数据 
      #skip_metadata:true,
      #)
#开始上传ipa到蒲公英，这里用的是蒲公英提供的插件
#update_description代表更新信息，password代表安装密码
# pgyer(update_description: "#{desc}", api_key: "#{api_key}", user_key: "#{user_key}", password: "123456", install_type: "2")

#在上传完ipa后，打开ipa的存放文件夹，起到提示上传完成的作用
system "open ../fastlane/build"

end
end
